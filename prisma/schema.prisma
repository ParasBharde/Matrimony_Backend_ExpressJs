// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  username           String             @unique
  password           String
  isAdmin            Boolean?           @default(false)
  first_name         String
  middle_name        String
  last_name          String
  gender             String
  dob                String
  age                Int
  contact_number     String             @unique
  address_1          String
  address_2          String?
  city               String
  height             Decimal
  weight             Int?
  color              String
  religion           String
  cast_or_community  String
  mother_tongue      String
  marital_status     String
  dietary_preference String
  occupation         String
  income             String
  father_name        String
  mother_name        String
  mother_occupation  String
  father_occupation  String
  mother_native      String
  father_native      String
  family_contact_no  String             @unique
  number_of_siblings Int
  brother            Int                @default(0)
  sister             Int                @default(0)
  father             Boolean?           @default(false)
  mother             Boolean?           @default(false)
  zodiac_sign        String
  birth_time         String
  birth_place        String
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  activePlan         Active_Plan?
  profile_img        Profile_Image?
  liked_profile      Liked_Profile[]
  download_profile   Download_Profile[]
  horoscope_img      Horoscopic_Image[]
  view_count         View_Count[]
}

model Profile_Image {
  id                   Int    @id @default(autoincrement())
  profile_img_url      String
  profile_img_publicId String
  profile_img_id       User   @relation(fields: [userProfileId], references: [id])
  userProfileId        Int    @unique
}

model Horoscopic_Image {
  id                     Int    @id @default(autoincrement())
  horoscope_img_url      String
  horoscope_img_publicId String
  horoscope_img_id       User   @relation(fields: [userHoroscopeImgId], references: [id])
  userHoroscopeImgId     Int
}

model Download_Profile {
  id                  Int  @id @default(autoincrement())
  download_profile_id Int
  userId              Int
  download_profile    User @relation(fields: [userId], references: [id])
}

model Liked_Profile {
  id               Int  @id @default(autoincrement())
  liked_profile_id Int
  user_id          Int
  liked_profile    User @relation(fields: [user_id], references: [id])
}

model View_Count {
  id             Int  @id @default(autoincrement())
  count          Int
  view_profileId Int
  userId         Int
  user_count     User @relation(fields: [userId], references: [id])
}

model Plans {
  id         Int          @id @default(autoincrement())
  plan_name  String
  plan_desc1 String
  plan_desc2 String
  plan_desc3 String?
  plan_price Int
  isActive   Boolean      @default(false)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  activePlan Active_Plan?
}

model Active_Plan {
  id                  Int      @id @default(autoincrement())
  activeUser          User     @relation(fields: [activeUserId], references: [id])
  activeUserId        Int      @unique
  activePlanId        Int      @unique
  activePlan          Plans    @relation(fields: [activePlanId], references: [id])
  isActive            Boolean  @default(false)
  member_disply_limit Int      @default(0)
  viwed_profile       Int      @default(0)
  remaining           Int      @default(0)
  valid_until         DateTime
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
}
